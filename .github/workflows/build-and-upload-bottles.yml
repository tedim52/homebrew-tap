name: Build and Upload Homebrew Bottles

on:
  push:
    branches:
      - master
      
env:
  KURTOSIS_CLI_FORMULA: tedim52/tap/kurtosis-cli
  SEMVER_REGEX: '(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Attempt to get version from latest commit message
        uses: actions-ecosystem/action-regex-match@v2
        id: get-version
        with:
          regex: ${{ env.SEMVER_REGEX }}
          text: ${{ github.event.head_commit.message }}

      # We assume that commit messages pushed to tap repo by goreleaser contain the release version.
      # If this changes or an accidental commit is made, we fail loudly to not attempt building the bottles.
      - name: Check if version was parsed from commit message and fail loudly if not
        if: ${{ steps.get-version.outputs.match == '' }}
        # This action allows using Github API directly, so we can use the core libraries fail function to fail loudly.
        uses: actions/github-script@v3
        with: 
          script: |
            core.setFailed('Unable to parse semantic version from latest tap commit message.')

      - name: Save release version
        run: |
          echo "VERSION=${{ steps.get-version.outputs.match }}" >> $GITHUB_ENV

      - name: Create a new release 
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

  build_and_upload:
    needs: release
    
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        arch:
          - amd64
          # - arm64
    runs-on: ${{ matrix.os }}
    env:
      GOARCH: ${{ matrix.arch }}
    steps:
      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Build bottle for specific os/arch
        run: |
          brew install --build-bottle ${{ env.KURTOSIS_CLI_FORMULA }}
          brew bottle ${{ env.KURTOSIS_CLI_FORMULA }}
          echo "ASSET_PATH=$(find . -name "*.tar.gz" -type f)" >> $GITHUB_ENV
      - name: Upload bottle as release asset for latest release
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
          # asset_name: kurtosis-cli--$${{ env.VERSION }}-${{ matrix.arch}}-${{ matrix.os }}.bottle.tar.gz
          asset_content_type: application/gzip